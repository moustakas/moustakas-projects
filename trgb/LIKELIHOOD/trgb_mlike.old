pro trgb_mlike, objname, iter=iter, binsize=binsize, minmag=minmag, maxmag=maxmag, $
                alpha=alpha, beta=beta, gamma=gamma, hst=hst, halo=halo, core=core, $
                ccut=ccut, help=help
;+
; NAME:
;	TRGB_MLIKE
;
; PURPOSE:
;	Detect the tip of the red-giant branch.
;
; INPUTS:
;
; KEYWORD PARAMETERS:
;
; COMMENTS:
;	Minmag, maxmag and binsize need to be picked intelligently.
;
; PROCEDURES USED:
;	COLORTABLE1, TRGB_READATA, TRGB_LFUNCTION, BOOT_ARRAYS,
;	TRGB_EDGE_DETECT, FORM_G(), DJS_ITERSTAT, STRN(),
;	TRGB_DATAPATH(), PS_OPEN, PS_CLOSE
;
; MODIFICATION HISTORY:
;-


	!x.ticklen=0.05
        p_thick = !p.thick & chars = !p.charsize
        charth = !p.charthick & xth = !x.thick & yth = !y.thick
        !p.thick = 1.5 & !p.charsize = 1.5 & !p.charthick = 1.5 & !x.thick=2 & !y.thick=2

        if keyword_set(help) then begin
            print
            print, 'Syntax : trgb_mlike, objname, iter=iter, binsize=binsize, '
            print, 'minmag=minmag, maxmag=maxmag, alpha=alpha, beta=beta, '
            print, 'gamma=gamma, hst=hst, halo=halo, core=core ccut=ccut, '
            print, 'help=help'
            print
            return
        endif

        colortable1

; read in the data

	trgb_readata, objname, datapath, data, infobase, hst=hst, halo=halo, core=core, ccut=ccut

;       data[3,*] = data[3,*] - infobase.a_i	; apply the extinction correction
        nstars = n_elements(data[0,*])

	if not keyword_set(iter) then iter = 100L
        if not keyword_set(binsize) then binsize = 0.01
        if not keyword_set(minmag) then minmag = min(data[3,*])
        if not keyword_set(maxmag) then maxmag = max(data[3,*]) 

        if not keyword_set(alpha) then alpha = 0.33 ; slope of the RGB
	if not keyword_set(beta) then beta = 0.8    ; slope of the TRGB jump
	if not keyword_set(gamma) then gamma = 5.0  ; slope of the AGB/foreground

; generate a luminosity function

        trgb_lfunction, data[3,*], data[4,*], lf, binsize=binsize, minmag=minmag, maxmag=maxmag

; print up some useful information

        print, 'Object    : ', infobase.truename
        print, 'Binsize   : ', strn(binsize,format='(F6.4)')
        print, 'Minmag    : ', strn(minmag,format='(F5.2)')
        print, 'Maxmag    : ', strn(maxmag,format='(F5.2)')
        print, 'Nstars    : ', strn(total(lf.hist),format='(I6)')+'/'+strn(nstars,format='(I6)')
        print, 'Iterations: ', strn(iter,format='(I5)')
        print, 'alpha     : ', strn(alpha,format='(F5.2)')
        print, 'beta      : ', strn(beta,format='(F5.2)')
        print, 'gamma     : ', strn(gamma,format='(F5.2)')
        print, '-------------------------------'
        print        
        
; create the discontinuity width array;  log_10(-cutarray) ranges from
; 1 to 0.01 mag with a stepsize of 5*binsize mag

        cutrange = 1./(5.*binsize)+1.
        cutarray = 2.*findgen(cutrange)/(cutrange-1.)
        ncut = n_elements(cutarray)
        
; find the TRGB with the original starlist

stop
        
        print, 'Computing the likelihood matrix of the original starlist . . . '
        t1 = systime(/seconds)
        trgb_edge_detect, lf, cutarray, lnlike, alpha=alpha, beta=beta, gamma=gamma
        t2 = systime(/seconds)-t1
        
        lnmax = max(lnlike,maxindx)

        x1 = maxindx mod lf.nhist
        y1 = maxindx/lf.nhist

        trgb = lf.mag[x1]
        trgbwidth = cutarray[y1]

        print, '. . . the TRGB was detected at '+strn(trgb,format='(F6.2)')+' mag'+$
          ' with a width of '+strn(10^(-trgbwidth),format='(F6.2)')+ ' mag.' & print

; bootstrap resample

        trgbboot = fltarr(iter)
        widthboot = fltarr(iter)

        boot_arrays, iter, lf, bootmags, booterrs

        print, 'The bootstrap should take about '+strn(t2*iter/60.,forma='(F6.2)')+' minutes.' & print
        for k = 0L, iter-1L do begin

            trgb_lfunction, bootmags[*,k], booterrs[*,k], lfboot, $
              binsize=binsize, minmag=minmag, maxmag=maxmag
            print, 'Iteration '+strn(k+1)+' . . . computing the likelihood matrix.'
            trgb_edge_detect, lfboot, cutarray, likeboot, alpha=alpha, beta=beta, gamma=gamma

            maxboot = max(likeboot,indxboot)

            x1boot = indxboot mod lfboot.nhist
            y1boot = indxboot/lfboot.nhist

            trgbboot[k] = lfboot.mag[x1boot]
            widthboot[k] = cutarray[y1boot]            

        endfor

; calculate the errors by iterative sigma clipping, the correlation
; matrix and determine the error ellipse 
        
        djs_iterstat, trgbboot, sigrej=3., maxiter=15, mean=trgbmean, median=trgbmed, $
          sigma=trgberr, mask=tmask
        goodtrgb = where(tmask eq 0B, gtcount)
        print & print, 'A total of '+strn(iter-gtcount)+' TRGB detections were rejected at 3-sigma.' & print

        djs_iterstat, widthboot, sigrej=3., maxiter=15, mean=widthmean, median=widthmed, $
          sigma=widtherr, mask=wmask

        r = correlate(trgbboot[goodtrgb],widthboot[goodtrgb]) ; correlation coefficient

; print the solution

        print, 'TRGB      : ', strn(trgb,format='(F7.4)')
        print, 'Error     : ', strn(trgberr,format='(F7.4)')
        print, 'TRGB Width: ', strn(trgbwidth,format='(F7.4)')
        print, 'Error     : ', strn(widtherr,format='(F7.4)')

; regenerate the best fit

        gbest = form_g(lf.mag-trgb,trgbwidth,alpha=alpha,beta=beta,gamma=gamma)
        gnorm = total(lf.hist)/total(gbest)
        
; plot the results

;       trgb_lfunction, data[3,*], data[4,*], lfplot, binsize=0.1, minmag=minmag, maxmag=maxmag

        window, 0, xs=500, ys=500
        plot, lf.mag, alog10(float(lf.hist)>1.), ps=10, $
          ytit='log N(m)', color=7, xsty=3, ysty=3, $
          xtickname=replicate(' ',10), position=[0.15,0.52,0.95,0.92], $
          title=infobase.truename
        oplot, lf.mag, alog10(gnorm*gbest), line=0, color=5, thick=1.5
        contour, lnlike, lf.mag, cutarray, levels=[-3,-2,-1], $
          ytitle='- Log TRGB Width', position=[0.15,0.12,0.95,0.52], color=3, $
          xsty=3, ysty=3, /noerase, xtit='I'

        path = trgb_datapath()
        plotpath = path[3]          ; plot subdirectory

        okay = 'N' & print
        read, okay, prompt='Generate a postscript plot (Y/[N])? '
        if strupcase(okay) eq 'Y' then begin
            ps_open, plotpath+infobase.object+'_lhood', /ps_fonts
            device, /times

            plot, lf.mag, alog10(float(lf.hist)>1.), ps=10, $
              ytit='log N(m)', color=7, xsty=3, ysty=3, $
              xtickname=replicate(' ',10), position=[0.15,0.52,0.95,0.92], $
              title=infobase.truename
            oplot, lf.mag, alog10(gnorm*gbest), line=0, color=5, thick=1.5
            contour, lnlike, lf.mag, cutarray, levels=[-3,-2,-1], $
              ytitle='- Log TRGB Width', position=[0.15,0.12,0.95,0.52], color=3, $
              xsty=3, ysty=3, /noerase, xtit='I (mag)'

            ps_close
        endif            

        respath = path[4]          ; results subdirectory
        resfile = respath+infobase.object+'_lhood.txt'

        okay = 'N' & print
        read, okay, prompt='Write the results to a datafile (Y/[N])? '
        if strupcase(okay) eq 'Y' then begin
            
            print & print, 'Writing '+resfile+' . . .'

            openw, lun1, resfile, /get_lun
            printf, lun1, '# Object    : ', infobase.truename
            printf, lun1, '# Date      : ', systime()
            printf, lun1, '# -------------------------------'
            printf, lun1, '# INPUT:'
            printf, lun1, '# -------------------------------'
            if keyword_set(halo) then printf, lun1, '# Keywords Used : Halo'
            if keyword_set(core) then printf, lun1, '# Keywords Used : Core'
            if keyword_set(ccut) then printf, lun1, '# Keywords Used : Ccut'
            if ((not keyword_set(halo)) and (not keyword_set(core)) and $
                (not keyword_set(ccut))) then printf, lun1, '# Keywords Used : None'
            printf, lun1, '# Binsize   : ', strn(binsize,format='(F6.4)')
            printf, lun1, '# Minmag    : ', strn(minmag,format='(F5.2)')
            printf, lun1, '# Maxmag    : ', strn(maxmag,format='(F5.2)')
            printf, lun1, '# Nstars    : ', strn(total(lf.hist),format='(I6)')+'/'+strn(nstars,format='(I6)')
            printf, lun1, '# Iterations: ', strn(iter,format='(I5)')
            printf, lun1, '# alpha     : ', strn(alpha,format='(F5.2)')
            printf, lun1, '# beta      : ', strn(beta,format='(F5.2)')
            printf, lun1, '# gamma     : ', strn(gamma,format='(F5.2)')
            printf, lun1, '# -------------------------------'
            printf, lun1, '# OUTPUT: '
            printf, lun1, '# -------------------------------'
            printf, lun1, '# TRGB      : ', strn(trgb,format='(F7.4)')
            printf, lun1, '# Error     : ', strn(trgberr,format='(F7.4)')
            printf, lun1, '# TRGB Width: ', strn(trgbwidth,format='(F7.4)')
            printf, lun1, '# Error     : ', strn(widtherr,format='(F7.4)')
            printf, lun1, '# -------------------------------'
            printf, lun1, '# BOOTSTRAP DATA: '
            printf, lun1, '# -------------------------------'
            printf, lun1, '# '
            printf, lun1, '#  TRGB   TRGB Width  '
            printf, lun1, '# '
            for k = 0L, iter-1L do printf, lun1, trgbboot[k], widthboot[k], format = '(2x,F7.4,2x,F7.4)'
            printf, lun1, '# -------------------------------'
            printf, lun1, '# LIKELIHOOD MATRIX: '
            printf, lun1, '# -------------------------------'
            printf, lun1, '# '
            tlike = transpose(lnlike)
            for k = 0L, lf.nhist-1L do printf, lun1, tlike[*,k], format = '(50F18.7)'
            free_lun, lun1        
 
        endif
        print
        
        !x.ticklen=0
        !p.thick = p_thick & !p.charsize=chars & !p.charthick=charth
        !x.thick = xth & !y.thick=yth

return
end
