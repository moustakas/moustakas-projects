pro smf_lfunction, lf, range, resplin, resplog, del=del, log=log, linear=linear
;+
; NAME:
;	SMF_LFUNCTION
;
; PURPOSE:
;	Generate a Sakai, Madore & Freedman (1996) smoothed luminosity
;	function.  
;
; INPUTS:
;	lf : LF structure generated by TRGB_LFUNCTION
;
; OPTIONAL INPUTS:
;	del : a "smooth factor" (default = 1.0)
;
; OUTPUTS:
;	lf.hist (modified with the smoothed LF)
;
; COMMON BLOCKS:
;
; MODIFICATION HISTORY:
;	John Moustakas, 24 August 2000, UofA
;-

        nrange = n_elements(range)

        err = fltarr(lf.nhist)
        resplin = fltarr(nrange)
        resplog = fltarr(nrange)
        
        for j = 0L, lf.nhist-1L do begin

; generate the continuous luminosity function            

            near = where(abs(lf.mags-lf.mag[j]) lt 5.*lf.merr,count) ; 5-sigma
            if count gt 0L then $
              lf.hist[j] = total(1./(sqrt(2.*!pi)*lf.merr[near])* $
                                 exp(-0.5*((lf.mags[near]-lf.mag[j])/lf.merr[near])^2))
            
; calculate the mean error per bin
            nearerr = where((lf.mags ge (lf.mag[j])-0.05) and (lf.mags le (lf.mag[j]+0.05)),errcount)
            if errcount gt 1L then err[j] = avg(lf.merr[nearerr]) else err[j] = 0.

        endfor

; generate the response functions

        err = err[range]
        
        if keyword_set(log) then begin
            for k = 0L, nrange-1L do $
              resplog[k] = (alog10(lf.hist[k+err[k]]) - alog10(lf.hist[k-err[k]]))*sqrt(lf.hist[k]) ; log
        endif else if keyword_set(linear) then begin
            for k = 0L, nrange-1L do $
              resplin[k] = lf.hist[k+err[k]] - lf.hist[k-err[k]] ; linear
        endif else begin
            for k = 0L, nrange-1L do begin
                resplin[k] = lf.hist[k+err[k]] - lf.hist[k-err[k]] ; linear
                resplog[k] = (alog10(lf.hist[k+err[k]]) - alog10(lf.hist[k-err[k]]))*sqrt(lf.hist[k]) ; log
            endfor
        endelse

return
end
