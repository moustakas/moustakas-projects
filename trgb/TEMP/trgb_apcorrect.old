pro matchstars, idlst, xclst, yclst, idalf, xcalf, ycalf, chialf, daohead, image, newchi
; jm00mar20ucb
; program to create an exclude starlist by matching the psf stars with
; the ALLFRAME coordinate centroids.  creates a file called image.exc.

	exclist = idlst-idlst
        for k = 0L, n_elements(idlst)-1L do begin
            exclist[k] = where(idlst[k] eq idalf,check)
            if check eq 0 then print, 'Star ', strn(idlst[k]), ' did not match.'
        endfor
        exclist = exclist[where(exclist ne -1L)]

        newid = idalf[exclist]
        newxc = xcalf[exclist]
        newyc = ycalf[exclist]
        newchi = chialf[exclist]

;	bad = where((abs(xclst-newxc) gt 2.) or (abs(yclst-newyc) gt 2.))

        print & print, 'Writing '+image+'.exc.' & print
        openw, lun1, image+'.exc', /get_lun
        printf, lun1, daohead[0] ; daophot header
        printf, lun1, daohead[1]
        printf, lun1, ' '
        for j = 0L, n_elements(newid)-1L do $
          printf, lun1, newid[j], newxc[j], newyc[j], format='(I5,F9.3,F9.3)'
        free_lun, lun1

return
end

pro trgb_apcorrect, objname, verbose=verbose, nosub=nosub
;+
; NAME:
;	APCORRECT
; PURPOSE:
;	Determines the value of the aperture correction (flux
;	difference between a 20 pixel circular aperture and the flux
;	from psf photometry) for a single image.
; INPUTS:
;	The user should be in an otherwise empty subdirectory with
;	the following file:
;		master.dir  : Directory where the fits image and its
;			      associated .psf and .alf files reside.
; OUTPUTS:
;	Creates the DAOPHOT .opt files for this image; a .lst file,
;	a coordinate file of the aperture correction stars; a .exc
;	file, a coordinate file of the .lst stars with the ALLFRAME
;	position and magnitudes; a file called image.apcor containing
;	aperture photometry on the aperture correction stars;
;	image.sub.fits, a image with all but the aperture correction
;	stars subtracted; and a file called aperture.correction which
;	contains the results.
; PROCEDURE:
;	The program uses IRAF's image.pst file as a list of bright,
;	isolated, unsaturated stars with which to determine the
;	aperture correction (these are the aperture correction stars).
;	The file is converted to a .lst file for use by DAOPHOT.
;	These stars are then matched by ID numbers with the ALLFRAME
;	photometry file which contains superior centroid positions to
;	create an exclude (.exc) file.  Using the ALLFRAME (.alf) file,
;	SUBSTAR is called to subtract all the neighbor stars in the
;	image.  Next, 20 pixel aperture photometry is done on the
;	aperture correction stars, and the difference of the resulting
;	magnitude with the ALLFRAME magnitude is computed.
; PROGRAMS CALLED:
;	makeopt.pro    : Generates the .opt files used by DAOPHOT for the
;		         current image.
;	iraf2dao.pro   : Converts IRAF .coo.1 and .pst files to
;		         DAOPHOT .coo and .lst files respectively.
;	checkstars.pro : An interactive program to allow the user to
;			 discard stars whose neighbors were not
;			 subtracted well. 
; WARNINGS:
;	(**) Any known old .coo.1 or .pst files should be placed in an
;	     OLD/ subdirectory or deleted.
;	(**) Deletes all files created by a previous run of this code
;            (to prevent DAOPHOT from crashing).
; MODIFICATION HISTORY:
;	Written, J. Moustakas, 2000 March 19-22
; 	modified jm00may24ucb
;-

;	on_error, 2	; return to user
	npar = N_params()

	if npar lt 1 then begin
            print, 'Syntax: apcorrect, objname, verbose=verbose, nosub=nosub'
            return
        endif

;	spawn, ['clear']
	spawn, ['pwd'], datapath	; current directory
        datapath = datapath[0]
        masterdir = rdtxt(datapath+'/master.dir') ; master object directory
        masterdir = masterdir[0]

; create the environment setting and temporary alias to the image

        setenv, 'dir='+masterdir
        spawn, ['alias dir cd $dir']

; delete any old .apcor and .sub.fits files from a previous run of
; this program to prevent DAOPHOT from crashing

        spawn, ['\rm '+objname+'.apcor']
        if not keyword_set(nosub) then spawn, ['\rm '+objname+'.sub.fits']

; create the .opt files for DAOPHOT appropriate to this image

        spawn, ['find '+masterdir+' -name "'+objname+'.pars" -print'], pname
        nold = where(strpos(pname,'OLD') eq -1,count)
        if count ne 0 then pname = pname[nold]
        pname = pname[0]

; find the IRAF psf

        spawn, ['find '+masterdir+' -name "'+objname+'.psf.fits" -print'], irafpsf
        nold = where(strpos(irafpsf,'OLD') eq -1,count)
        if count ne 0 then irafpsf = irafpsf[nold]
        irafpsf = irafpsf[0]

; pop out the fits header for this image

        fhead = headfits(masterdir+'/'+objname+'.fits')
        psfhead = headfits(irafpsf)

; create the .opt files for DAOPHOT appropriate to this image

        print, 'Creating the .opt files.'
        trgb_makeopt, pname, psfhead

; use .pst as a starlist of bright, unsaturated, isolated stars

        spawn, ['find '+masterdir+' -name "'+objname+'.pst" -print'], irafpst
        nold = where(strpos(irafpst,'OLD') eq -1,count)
        if count ne 0 then irafpst = irafpst[nold]
        irafpst = irafpst[0]

; convert the .pst to a .lst file and write it to the current directory

        lstfile = datapath+'/'+objname+'.lst'
        print, 'Converting the pst file.'
        iraf2dao, irafpst, pname, fhead, lstfile, /lst

        daoheader, pname, fhead, daohead, /lst	; create a daophot header

; match up psf stars with the ALLFRAME photometry (which has better
; centroids) to create an exclude file

        readfast, datapath+'/'+objname+'.lst', lstdata, skip=3, ncols=4
        idlst = long(lstdata[0,*]) & xclst = lstdata[1,*] & yclst = lstdata[2,*]

; sometimes the magerr and the skyval overlap because of the way
; DAOPHOT writes files, so use the filter to figure out how many
; columns to read.

        filter = sxpar(fhead,'FILTER')
        if strupcase(strn(filter)) eq 'I' then cols = 8 else cols = 9

        readfast, masterdir+'/'+objname+'.alf', alfdata, skip=3, ncols=cols
        idalf = alfdata[0,*] & xcalf = alfdata[1,*] & ycalf = alfdata[2,*]
        magalf = alfdata[3,*] & chialf = alfdata[6,*]

        matchstars, idlst, xclst, yclst, idalf, xcalf, ycalf, chialf, daohead, objname, chimatch

        if not keyword_set(nosub) then begin

; SUBSTAR script:
            openw, lun1, 'substar_script', /get_lun
            printf, lun1, 'ATTACH dir:'+objname+'.fits'	; image
            printf, lun1, 'SUBSTAR'
            printf, lun1, 'dir:'+objname+'.psf' ; psf
            printf, lun1, 'dir:'+objname+'.alf' ; allframe photometry file
            printf, lun1, 'Y'   		; answer yes to exclude a starlist
            printf, lun1, objname+'.exc' 	; exclude the psf stars
            printf, lun1, objname+'.sub.fits' 	; output subtracted image
            printf, lun1, 'EXIT' 		; exit
            free_lun, lun1

            print & print, 'Subtracting away the neighbor stars . . .' & print
            if keyword_set(verbose) then begin
                spawn, ['daophot < substar_script']
            endif else begin
                spawn, ['daophot < substar_script > substar_log']
                print, '. . . finished.' & beep
            endelse

        endif
            
; APERTURE PHOTOMETRY (20 pixels) on the aperture correction stars 
        openw, lun2, 'aphot_script', /get_lun
        printf, lun2, 'ATTACH '+objname+'.sub.fits' ; neighbor-subtracted image
;       printf, lun2, 'ATTACH '+objname+'.fits'     ; raw image
        printf, lun2, 'PHOT'
        printf, lun2, 'photo.opt'		; photometry file
        printf, lun2, 'A2 = 6'			; multiple aperture photometry
        printf, lun2, 'A3 = 8'			; generate the curve of growth
        printf, lun2, 'A4 = 10'
        printf, lun2, 'A5 = 12'
        printf, lun2, 'A6 = 14'
        printf, lun2, 'A7 = 16'
        printf, lun2, 'A8 = 18'
        printf, lun2, 'A9 = 20'
        printf, lun2, ' '
        printf, lun2, objname+'.exc' 		; coordinate file
        printf, lun2, objname+'.apcor'		; output aperture photometry file
        printf, lun2, 'EXIT'
        free_lun, lun2

        print & print, 'Doing aperture photometry on the starlist.'
        if keyword_set(verbose) then begin
            spawn, ['daophot < aphot_script']
        endif else spawn, ['daophot < aphot_script > aphot_log']

; read in the aperture photometry file and reorganize it

	temp = rdtxt(objname+'.apcor')
        openw, lun3, 'tempfile', /get_lun
        for i = 0L, ((n_elements(temp)-4L)/3L) do printf, lun3, temp[3*i+4]
        free_lun, lun3
        read_data, 'tempfile', apdata, ncol=12
;       spawn, ['\rm tempfile']
        
; make sure the neighbor stars were subtracted well

 	trgb_checkstars, objname, masterdir, apdata, newdata, chimatch 

        match = long(newdata[*,0]-newdata[*,0])
        for i = 0L, n_elements(newdata[*,0])-1L do match[i] = where(newdata[i,0] eq idalf)

        corr = newdata[*,11]-magalf[match] 	; aperture correction
        openw, lun4, masterdir+'/'+objname+'.apc', /get_lun
        printf, lun4, '# Aperture correction for '+objname
        printf, lun4, ' '
        printf, lun4, ' Mean    '+string(mean(corr),format='(F7.4)')
        printf, lun4, ' Median  '+string(median(corr),format='(F7.4)') 
        printf, lun4, ' StDev   '+string(stdev(corr),format='(F7.4)')
        free_lun, lun4            

        print, 'Aperture Correction:'
        print, '--------------------'
        print, 'Mean   : ', mean(corr)
        print, 'Median : ', median(corr)
        print, 'StDev  : ', stdev(corr)
        print

        window, 0, xs=450, ys=450
        plothist, corr, bin=stdev(corr)<0.2, xsty=3, ysty=3, xtit='Aperture Correction', ytit='Number', $
          thick=2, charsize=1.3, charthick=1.3, xthick=2, ythick=2
        xyouts, [0.75,0.75], [0.85,0.85], '# Stars: '+strn(n_elements(corr)), $
          /normal, align=0.5, charsiz=1.8, charthick=1.8

; create a postscript file of the histogram of aperture corrections
        ps_open, 'apcorhist', /ps_fonts, /portrait
        device, xs=5, ys=5, /inches, /times
        plothist, corr, bin=stdev(corr)<0.2, xsty=3, ysty=3, xtit='Aperture Correction', ytit='Number', $
          thick=2, charsize=1.3, charthick=1.3, xthick=2, ythick=2
        xyouts, [0.75,0.75], [0.85,0.85], '# Stars: '+strn(n_elements(corr)), $
          /normal, align=0.5, charsiz=1.8, charthick=1.8
        ps_close

; destroy the temporary alias and environment variable

        spawn, ['unalias dir']
        spawn, ['unsetenv dir']

return
end
